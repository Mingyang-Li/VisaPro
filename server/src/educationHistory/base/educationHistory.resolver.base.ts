/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateEducationHistoryArgs } from "./CreateEducationHistoryArgs";
import { UpdateEducationHistoryArgs } from "./UpdateEducationHistoryArgs";
import { DeleteEducationHistoryArgs } from "./DeleteEducationHistoryArgs";
import { EducationHistoryFindManyArgs } from "./EducationHistoryFindManyArgs";
import { EducationHistoryFindUniqueArgs } from "./EducationHistoryFindUniqueArgs";
import { EducationHistory } from "./EducationHistory";
import { Applicant } from "../../applicant/base/Applicant";
import { User } from "../../user/base/User";
import { EducationHistoryService } from "../educationHistory.service";

@graphql.Resolver(() => EducationHistory)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class EducationHistoryResolverBase {
  constructor(
    protected readonly service: EducationHistoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EducationHistory",
    action: "read",
    possession: "any",
  })
  async _educationHistoriesMeta(
    @graphql.Args() args: EducationHistoryFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EducationHistory])
  @nestAccessControl.UseRoles({
    resource: "EducationHistory",
    action: "read",
    possession: "any",
  })
  async educationHistories(
    @graphql.Args() args: EducationHistoryFindManyArgs
  ): Promise<EducationHistory[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EducationHistory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EducationHistory",
    action: "read",
    possession: "own",
  })
  async educationHistory(
    @graphql.Args() args: EducationHistoryFindUniqueArgs
  ): Promise<EducationHistory | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EducationHistory)
  @nestAccessControl.UseRoles({
    resource: "EducationHistory",
    action: "create",
    possession: "any",
  })
  async createEducationHistory(
    @graphql.Args() args: CreateEducationHistoryArgs
  ): Promise<EducationHistory> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        applicant: args.data.applicant
          ? {
              connect: args.data.applicant,
            }
          : undefined,

        archivedBy: args.data.archivedBy
          ? {
              connect: args.data.archivedBy,
            }
          : undefined,

        createdBy: args.data.createdBy
          ? {
              connect: args.data.createdBy,
            }
          : undefined,

        updatedBy: args.data.updatedBy
          ? {
              connect: args.data.updatedBy,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EducationHistory)
  @nestAccessControl.UseRoles({
    resource: "EducationHistory",
    action: "update",
    possession: "any",
  })
  async updateEducationHistory(
    @graphql.Args() args: UpdateEducationHistoryArgs
  ): Promise<EducationHistory | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          applicant: args.data.applicant
            ? {
                connect: args.data.applicant,
              }
            : undefined,

          archivedBy: args.data.archivedBy
            ? {
                connect: args.data.archivedBy,
              }
            : undefined,

          createdBy: args.data.createdBy
            ? {
                connect: args.data.createdBy,
              }
            : undefined,

          updatedBy: args.data.updatedBy
            ? {
                connect: args.data.updatedBy,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EducationHistory)
  @nestAccessControl.UseRoles({
    resource: "EducationHistory",
    action: "delete",
    possession: "any",
  })
  async deleteEducationHistory(
    @graphql.Args() args: DeleteEducationHistoryArgs
  ): Promise<EducationHistory | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Applicant, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  async applicant(
    @graphql.Parent() parent: EducationHistory
  ): Promise<Applicant | null> {
    const result = await this.service.getApplicant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async archivedBy(
    @graphql.Parent() parent: EducationHistory
  ): Promise<User | null> {
    const result = await this.service.getArchivedBy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async createdBy(
    @graphql.Parent() parent: EducationHistory
  ): Promise<User | null> {
    const result = await this.service.getCreatedBy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async updatedBy(
    @graphql.Parent() parent: EducationHistory
  ): Promise<User | null> {
    const result = await this.service.getUpdatedBy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
