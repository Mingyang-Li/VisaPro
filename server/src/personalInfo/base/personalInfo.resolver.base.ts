/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePersonalInfoArgs } from "./CreatePersonalInfoArgs";
import { UpdatePersonalInfoArgs } from "./UpdatePersonalInfoArgs";
import { DeletePersonalInfoArgs } from "./DeletePersonalInfoArgs";
import { PersonalInfoFindManyArgs } from "./PersonalInfoFindManyArgs";
import { PersonalInfoFindUniqueArgs } from "./PersonalInfoFindUniqueArgs";
import { PersonalInfo } from "./PersonalInfo";
import { Applicant } from "../../applicant/base/Applicant";
import { User } from "../../user/base/User";
import { PersonalInfoService } from "../personalInfo.service";

@graphql.Resolver(() => PersonalInfo)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class PersonalInfoResolverBase {
  constructor(
    protected readonly service: PersonalInfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PersonalInfo",
    action: "read",
    possession: "any",
  })
  async _personalInfosMeta(
    @graphql.Args() args: PersonalInfoFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PersonalInfo])
  @nestAccessControl.UseRoles({
    resource: "PersonalInfo",
    action: "read",
    possession: "any",
  })
  async personalInfos(
    @graphql.Args() args: PersonalInfoFindManyArgs
  ): Promise<PersonalInfo[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PersonalInfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PersonalInfo",
    action: "read",
    possession: "own",
  })
  async personalInfo(
    @graphql.Args() args: PersonalInfoFindUniqueArgs
  ): Promise<PersonalInfo | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PersonalInfo)
  @nestAccessControl.UseRoles({
    resource: "PersonalInfo",
    action: "create",
    possession: "any",
  })
  async createPersonalInfo(
    @graphql.Args() args: CreatePersonalInfoArgs
  ): Promise<PersonalInfo> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        applicant: args.data.applicant
          ? {
              connect: args.data.applicant,
            }
          : undefined,

        archivedBy: args.data.archivedBy
          ? {
              connect: args.data.archivedBy,
            }
          : undefined,

        createdBy: args.data.createdBy
          ? {
              connect: args.data.createdBy,
            }
          : undefined,

        updatedBy: args.data.updatedBy
          ? {
              connect: args.data.updatedBy,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PersonalInfo)
  @nestAccessControl.UseRoles({
    resource: "PersonalInfo",
    action: "update",
    possession: "any",
  })
  async updatePersonalInfo(
    @graphql.Args() args: UpdatePersonalInfoArgs
  ): Promise<PersonalInfo | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          applicant: args.data.applicant
            ? {
                connect: args.data.applicant,
              }
            : undefined,

          archivedBy: args.data.archivedBy
            ? {
                connect: args.data.archivedBy,
              }
            : undefined,

          createdBy: args.data.createdBy
            ? {
                connect: args.data.createdBy,
              }
            : undefined,

          updatedBy: args.data.updatedBy
            ? {
                connect: args.data.updatedBy,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PersonalInfo)
  @nestAccessControl.UseRoles({
    resource: "PersonalInfo",
    action: "delete",
    possession: "any",
  })
  async deletePersonalInfo(
    @graphql.Args() args: DeletePersonalInfoArgs
  ): Promise<PersonalInfo | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Applicant, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  async applicant(
    @graphql.Parent() parent: PersonalInfo
  ): Promise<Applicant | null> {
    const result = await this.service.getApplicant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async archivedBy(
    @graphql.Parent() parent: PersonalInfo
  ): Promise<User | null> {
    const result = await this.service.getArchivedBy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async createdBy(
    @graphql.Parent() parent: PersonalInfo
  ): Promise<User | null> {
    const result = await this.service.getCreatedBy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async updatedBy(
    @graphql.Parent() parent: PersonalInfo
  ): Promise<User | null> {
    const result = await this.service.getUpdatedBy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
