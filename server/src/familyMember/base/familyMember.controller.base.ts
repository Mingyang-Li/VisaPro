/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FamilyMemberService } from "../familyMember.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { FamilyMemberCreateInput } from "./FamilyMemberCreateInput";
import { FamilyMemberWhereInput } from "./FamilyMemberWhereInput";
import { FamilyMemberWhereUniqueInput } from "./FamilyMemberWhereUniqueInput";
import { FamilyMemberFindManyArgs } from "./FamilyMemberFindManyArgs";
import { FamilyMemberUpdateInput } from "./FamilyMemberUpdateInput";
import { FamilyMember } from "./FamilyMember";
import { ApplicantFindManyArgs } from "../../applicant/base/ApplicantFindManyArgs";
import { Applicant } from "../../applicant/base/Applicant";
import { ApplicantWhereUniqueInput } from "../../applicant/base/ApplicantWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class FamilyMemberControllerBase {
  constructor(
    protected readonly service: FamilyMemberService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FamilyMember })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(
    @common.Body() data: FamilyMemberCreateInput
  ): Promise<FamilyMember> {
    return await this.service.create({
      data: {
        ...data,

        archivedBy: data.archivedBy
          ? {
              connect: data.archivedBy,
            }
          : undefined,

        createdBy: data.createdBy
          ? {
              connect: data.createdBy,
            }
          : undefined,

        updatedBy: data.updatedBy
          ? {
              connect: data.updatedBy,
            }
          : undefined,
      },
      select: {
        archived: true,

        archivedBy: {
          select: {
            id: true,
          },
        },

        countriesOfCitizenship: true,
        countryOfBirth: true,
        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        dateOfBirth: true,
        firstName: true,
        id: true,
        lastName: true,
        relationshipToApplicant: true,
        updatedAt: true,

        updatedBy: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [FamilyMember] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(FamilyMemberFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<FamilyMember[]> {
    const args = plainToClass(FamilyMemberFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        archived: true,

        archivedBy: {
          select: {
            id: true,
          },
        },

        countriesOfCitizenship: true,
        countryOfBirth: true,
        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        dateOfBirth: true,
        firstName: true,
        id: true,
        lastName: true,
        relationshipToApplicant: true,
        updatedAt: true,

        updatedBy: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FamilyMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: FamilyMemberWhereUniqueInput
  ): Promise<FamilyMember | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        archived: true,

        archivedBy: {
          select: {
            id: true,
          },
        },

        countriesOfCitizenship: true,
        countryOfBirth: true,
        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        dateOfBirth: true,
        firstName: true,
        id: true,
        lastName: true,
        relationshipToApplicant: true,
        updatedAt: true,

        updatedBy: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FamilyMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: FamilyMemberWhereUniqueInput,
    @common.Body() data: FamilyMemberUpdateInput
  ): Promise<FamilyMember | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          archivedBy: data.archivedBy
            ? {
                connect: data.archivedBy,
              }
            : undefined,

          createdBy: data.createdBy
            ? {
                connect: data.createdBy,
              }
            : undefined,

          updatedBy: data.updatedBy
            ? {
                connect: data.updatedBy,
              }
            : undefined,
        },
        select: {
          archived: true,

          archivedBy: {
            select: {
              id: true,
            },
          },

          countriesOfCitizenship: true,
          countryOfBirth: true,
          createdAt: true,

          createdBy: {
            select: {
              id: true,
            },
          },

          dateOfBirth: true,
          firstName: true,
          id: true,
          lastName: true,
          relationshipToApplicant: true,
          updatedAt: true,

          updatedBy: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FamilyMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: FamilyMemberWhereUniqueInput
  ): Promise<FamilyMember | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          archived: true,

          archivedBy: {
            select: {
              id: true,
            },
          },

          countriesOfCitizenship: true,
          countryOfBirth: true,
          createdAt: true,

          createdBy: {
            select: {
              id: true,
            },
          },

          dateOfBirth: true,
          firstName: true,
          id: true,
          lastName: true,
          relationshipToApplicant: true,
          updatedAt: true,

          updatedBy: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/applicants")
  @ApiNestedQuery(ApplicantFindManyArgs)
  async findManyApplicants(
    @common.Req() request: Request,
    @common.Param() params: FamilyMemberWhereUniqueInput
  ): Promise<Applicant[]> {
    const query = plainToClass(ApplicantFindManyArgs, request.query);
    const results = await this.service.findApplicants(params.id, {
      ...query,
      select: {
        archived: true,
        archivedAt: true,

        archivedBy: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        id: true,

        personalInfo: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        updatedBy: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/applicants")
  async connectApplicants(
    @common.Param() params: FamilyMemberWhereUniqueInput,
    @common.Body() body: ApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicants: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/applicants")
  async updateApplicants(
    @common.Param() params: FamilyMemberWhereUniqueInput,
    @common.Body() body: ApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicants: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/applicants")
  async disconnectApplicants(
    @common.Param() params: FamilyMemberWhereUniqueInput,
    @common.Body() body: ApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicants: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
