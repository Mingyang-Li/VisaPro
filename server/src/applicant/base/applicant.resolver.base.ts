/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import * as gqlUserRoles from "../../auth/gqlUserRoles.decorator";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateApplicantArgs } from "./CreateApplicantArgs";
import { UpdateApplicantArgs } from "./UpdateApplicantArgs";
import { DeleteApplicantArgs } from "./DeleteApplicantArgs";
import { ApplicantFindManyArgs } from "./ApplicantFindManyArgs";
import { ApplicantFindUniqueArgs } from "./ApplicantFindUniqueArgs";
import { Applicant } from "./Applicant";
import { EducationHistoryFindManyArgs } from "../../educationHistory/base/EducationHistoryFindManyArgs";
import { EducationHistory } from "../../educationHistory/base/EducationHistory";
import { EmploymentHistoryFindManyArgs } from "../../employmentHistory/base/EmploymentHistoryFindManyArgs";
import { EmploymentHistory } from "../../employmentHistory/base/EmploymentHistory";
import { FamilyMemberFindManyArgs } from "../../familyMember/base/FamilyMemberFindManyArgs";
import { FamilyMember } from "../../familyMember/base/FamilyMember";
import { TravelHistoryFindManyArgs } from "../../travelHistory/base/TravelHistoryFindManyArgs";
import { TravelHistory } from "../../travelHistory/base/TravelHistory";
import { User } from "../../user/base/User";
import { PersonalInfo } from "../../personalInfo/base/PersonalInfo";
import { ApplicantService } from "../applicant.service";

@graphql.Resolver(() => Applicant)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ApplicantResolverBase {
  constructor(
    protected readonly service: ApplicantService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  async _applicantsMeta(
    @graphql.Args() args: ApplicantFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [Applicant])
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  async applicants(
    @graphql.Args() args: ApplicantFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Applicant[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Applicant",
    });
    const results = await this.service.findMany(args);
    return results.map((result) => permission.filter(result));
  }

  @graphql.Query(() => Applicant, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "own",
  })
  async applicant(
    @graphql.Args() args: ApplicantFindUniqueArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Applicant | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "own",
      resource: "Applicant",
    });
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.Mutation(() => Applicant)
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "create",
    possession: "any",
  })
  async createApplicant(
    @graphql.Args() args: CreateApplicantArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Applicant> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "create",
      possession: "any",
      resource: "Applicant",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(
      permission,
      args.data
    );
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new apollo.ApolloError(
        `providing the properties: ${properties} on ${"Applicant"} creation is forbidden for roles: ${roles}`
      );
    }
    // @ts-ignore
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        archivedBy: args.data.archivedBy
          ? {
              connect: args.data.archivedBy,
            }
          : undefined,

        createdBy: args.data.createdBy
          ? {
              connect: args.data.createdBy,
            }
          : undefined,

        personalInfo: args.data.personalInfo
          ? {
              connect: args.data.personalInfo,
            }
          : undefined,

        updatedBy: args.data.updatedBy
          ? {
              connect: args.data.updatedBy,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Applicant)
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "update",
    possession: "any",
  })
  async updateApplicant(
    @graphql.Args() args: UpdateApplicantArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Applicant | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Applicant",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(
      permission,
      args.data
    );
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new apollo.ApolloError(
        `providing the properties: ${properties} on ${"Applicant"} update is forbidden for roles: ${roles}`
      );
    }
    try {
      // @ts-ignore
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          archivedBy: args.data.archivedBy
            ? {
                connect: args.data.archivedBy,
              }
            : undefined,

          createdBy: args.data.createdBy
            ? {
                connect: args.data.createdBy,
              }
            : undefined,

          personalInfo: args.data.personalInfo
            ? {
                connect: args.data.personalInfo,
              }
            : undefined,

          updatedBy: args.data.updatedBy
            ? {
                connect: args.data.updatedBy,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Applicant)
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "delete",
    possession: "any",
  })
  async deleteApplicant(
    @graphql.Args() args: DeleteApplicantArgs
  ): Promise<Applicant | null> {
    try {
      // @ts-ignore
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [EducationHistory])
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  async educationHistories(
    @graphql.Parent() parent: Applicant,
    @graphql.Args() args: EducationHistoryFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<EducationHistory[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "EducationHistory",
    });
    const results = await this.service.findEducationHistories(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [EmploymentHistory])
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  async employmentHistories(
    @graphql.Parent() parent: Applicant,
    @graphql.Args() args: EmploymentHistoryFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<EmploymentHistory[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "EmploymentHistory",
    });
    const results = await this.service.findEmploymentHistories(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [FamilyMember])
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  async familyMembers(
    @graphql.Parent() parent: Applicant,
    @graphql.Args() args: FamilyMemberFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<FamilyMember[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "FamilyMember",
    });
    const results = await this.service.findFamilyMembers(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [TravelHistory])
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  async travelHistories(
    @graphql.Parent() parent: Applicant,
    @graphql.Args() args: TravelHistoryFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<TravelHistory[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "TravelHistory",
    });
    const results = await this.service.findTravelHistories(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  async archivedBy(
    @graphql.Parent() parent: Applicant,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<User | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "User",
    });
    const result = await this.service.getArchivedBy(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  async createdBy(
    @graphql.Parent() parent: Applicant,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<User | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "User",
    });
    const result = await this.service.getCreatedBy(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.ResolveField(() => PersonalInfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  async personalInfo(
    @graphql.Parent() parent: Applicant,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<PersonalInfo | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "PersonalInfo",
    });
    const result = await this.service.getPersonalInfo(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  async updatedBy(
    @graphql.Parent() parent: Applicant,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<User | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "User",
    });
    const result = await this.service.getUpdatedBy(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  async user(
    @graphql.Parent() parent: Applicant,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<User | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "User",
    });
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }
}
