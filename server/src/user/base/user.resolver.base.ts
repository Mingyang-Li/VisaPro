/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateUserArgs } from "./CreateUserArgs";
import { UpdateUserArgs } from "./UpdateUserArgs";
import { DeleteUserArgs } from "./DeleteUserArgs";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserFindUniqueArgs } from "./UserFindUniqueArgs";
import { User } from "./User";
import { ApplicantFindManyArgs } from "../../applicant/base/ApplicantFindManyArgs";
import { Applicant } from "../../applicant/base/Applicant";
import { EducationHistoryFindManyArgs } from "../../educationHistory/base/EducationHistoryFindManyArgs";
import { EducationHistory } from "../../educationHistory/base/EducationHistory";
import { EmploymentHistoryFindManyArgs } from "../../employmentHistory/base/EmploymentHistoryFindManyArgs";
import { EmploymentHistory } from "../../employmentHistory/base/EmploymentHistory";
import { FamilyMemberFindManyArgs } from "../../familyMember/base/FamilyMemberFindManyArgs";
import { FamilyMember } from "../../familyMember/base/FamilyMember";
import { PersonalInfoFindManyArgs } from "../../personalInfo/base/PersonalInfoFindManyArgs";
import { PersonalInfo } from "../../personalInfo/base/PersonalInfo";
import { TravelHistoryFindManyArgs } from "../../travelHistory/base/TravelHistoryFindManyArgs";
import { TravelHistory } from "../../travelHistory/base/TravelHistory";
import { UserService } from "../user.service";

@graphql.Resolver(() => User)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class UserResolverBase {
  constructor(
    protected readonly service: UserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async _usersMeta(
    @graphql.Args() args: UserFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [User])
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async users(@graphql.Args() args: UserFindManyArgs): Promise<User[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "own",
  })
  async user(@graphql.Args() args: UserFindUniqueArgs): Promise<User | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => User)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "create",
    possession: "any",
  })
  async createUser(@graphql.Args() args: CreateUserArgs): Promise<User> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => User)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateUser(@graphql.Args() args: UpdateUserArgs): Promise<User | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => User)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "delete",
    possession: "any",
  })
  async deleteUser(@graphql.Args() args: DeleteUserArgs): Promise<User | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Applicant])
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  async applicants(
    @graphql.Parent() parent: User,
    @graphql.Args() args: ApplicantFindManyArgs
  ): Promise<Applicant[]> {
    const results = await this.service.findApplicants(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Applicant])
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  async applicantsArchived(
    @graphql.Parent() parent: User,
    @graphql.Args() args: ApplicantFindManyArgs
  ): Promise<Applicant[]> {
    const results = await this.service.findApplicantsArchived(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Applicant])
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  async applicantsCreated(
    @graphql.Parent() parent: User,
    @graphql.Args() args: ApplicantFindManyArgs
  ): Promise<Applicant[]> {
    const results = await this.service.findApplicantsCreated(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Applicant])
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  async applicantsUpdated(
    @graphql.Parent() parent: User,
    @graphql.Args() args: ApplicantFindManyArgs
  ): Promise<Applicant[]> {
    const results = await this.service.findApplicantsUpdated(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EducationHistory])
  @nestAccessControl.UseRoles({
    resource: "EducationHistory",
    action: "read",
    possession: "any",
  })
  async educationHistoriesArchived(
    @graphql.Parent() parent: User,
    @graphql.Args() args: EducationHistoryFindManyArgs
  ): Promise<EducationHistory[]> {
    const results = await this.service.findEducationHistoriesArchived(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EducationHistory])
  @nestAccessControl.UseRoles({
    resource: "EducationHistory",
    action: "read",
    possession: "any",
  })
  async educationHistoriesCreated(
    @graphql.Parent() parent: User,
    @graphql.Args() args: EducationHistoryFindManyArgs
  ): Promise<EducationHistory[]> {
    const results = await this.service.findEducationHistoriesCreated(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EducationHistory])
  @nestAccessControl.UseRoles({
    resource: "EducationHistory",
    action: "read",
    possession: "any",
  })
  async educationHistoriesUpdated(
    @graphql.Parent() parent: User,
    @graphql.Args() args: EducationHistoryFindManyArgs
  ): Promise<EducationHistory[]> {
    const results = await this.service.findEducationHistoriesUpdated(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EmploymentHistory])
  @nestAccessControl.UseRoles({
    resource: "EmploymentHistory",
    action: "read",
    possession: "any",
  })
  async employmentHistoriesArchived(
    @graphql.Parent() parent: User,
    @graphql.Args() args: EmploymentHistoryFindManyArgs
  ): Promise<EmploymentHistory[]> {
    const results = await this.service.findEmploymentHistoriesArchived(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EmploymentHistory])
  @nestAccessControl.UseRoles({
    resource: "EmploymentHistory",
    action: "read",
    possession: "any",
  })
  async employmentHistoriesCreated(
    @graphql.Parent() parent: User,
    @graphql.Args() args: EmploymentHistoryFindManyArgs
  ): Promise<EmploymentHistory[]> {
    const results = await this.service.findEmploymentHistoriesCreated(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EmploymentHistory])
  @nestAccessControl.UseRoles({
    resource: "EmploymentHistory",
    action: "read",
    possession: "any",
  })
  async employmentHistoriesUpdated(
    @graphql.Parent() parent: User,
    @graphql.Args() args: EmploymentHistoryFindManyArgs
  ): Promise<EmploymentHistory[]> {
    const results = await this.service.findEmploymentHistoriesUpdated(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FamilyMember])
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "read",
    possession: "any",
  })
  async familyMembersArchived(
    @graphql.Parent() parent: User,
    @graphql.Args() args: FamilyMemberFindManyArgs
  ): Promise<FamilyMember[]> {
    const results = await this.service.findFamilyMembersArchived(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FamilyMember])
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "read",
    possession: "any",
  })
  async familyMembersCreated(
    @graphql.Parent() parent: User,
    @graphql.Args() args: FamilyMemberFindManyArgs
  ): Promise<FamilyMember[]> {
    const results = await this.service.findFamilyMembersCreated(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FamilyMember])
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "read",
    possession: "any",
  })
  async familyMembersUpdated(
    @graphql.Parent() parent: User,
    @graphql.Args() args: FamilyMemberFindManyArgs
  ): Promise<FamilyMember[]> {
    const results = await this.service.findFamilyMembersUpdated(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PersonalInfo])
  @nestAccessControl.UseRoles({
    resource: "PersonalInfo",
    action: "read",
    possession: "any",
  })
  async personalInfosArchived(
    @graphql.Parent() parent: User,
    @graphql.Args() args: PersonalInfoFindManyArgs
  ): Promise<PersonalInfo[]> {
    const results = await this.service.findPersonalInfosArchived(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PersonalInfo])
  @nestAccessControl.UseRoles({
    resource: "PersonalInfo",
    action: "read",
    possession: "any",
  })
  async personalInfosCreated(
    @graphql.Parent() parent: User,
    @graphql.Args() args: PersonalInfoFindManyArgs
  ): Promise<PersonalInfo[]> {
    const results = await this.service.findPersonalInfosCreated(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PersonalInfo])
  @nestAccessControl.UseRoles({
    resource: "PersonalInfo",
    action: "read",
    possession: "any",
  })
  async personalInfosUpdated(
    @graphql.Parent() parent: User,
    @graphql.Args() args: PersonalInfoFindManyArgs
  ): Promise<PersonalInfo[]> {
    const results = await this.service.findPersonalInfosUpdated(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [TravelHistory])
  @nestAccessControl.UseRoles({
    resource: "TravelHistory",
    action: "read",
    possession: "any",
  })
  async travelHistoriesArchived(
    @graphql.Parent() parent: User,
    @graphql.Args() args: TravelHistoryFindManyArgs
  ): Promise<TravelHistory[]> {
    const results = await this.service.findTravelHistoriesArchived(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [TravelHistory])
  @nestAccessControl.UseRoles({
    resource: "TravelHistory",
    action: "read",
    possession: "any",
  })
  async travelHistoriesCreated(
    @graphql.Parent() parent: User,
    @graphql.Args() args: TravelHistoryFindManyArgs
  ): Promise<TravelHistory[]> {
    const results = await this.service.findTravelHistoriesCreated(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [TravelHistory])
  @nestAccessControl.UseRoles({
    resource: "TravelHistory",
    action: "read",
    possession: "any",
  })
  async travelHistoriesUpdated(
    @graphql.Parent() parent: User,
    @graphql.Args() args: TravelHistoryFindManyArgs
  ): Promise<TravelHistory[]> {
    const results = await this.service.findTravelHistoriesUpdated(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
