/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserService } from "../user.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserCreateInput } from "./UserCreateInput";
import { UserWhereInput } from "./UserWhereInput";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserUpdateInput } from "./UserUpdateInput";
import { User } from "./User";
import { ApplicantFindManyArgs } from "../../applicant/base/ApplicantFindManyArgs";
import { Applicant } from "../../applicant/base/Applicant";
import { ApplicantWhereUniqueInput } from "../../applicant/base/ApplicantWhereUniqueInput";
import { EducationHistoryFindManyArgs } from "../../educationHistory/base/EducationHistoryFindManyArgs";
import { EducationHistory } from "../../educationHistory/base/EducationHistory";
import { EducationHistoryWhereUniqueInput } from "../../educationHistory/base/EducationHistoryWhereUniqueInput";
import { EmploymentHistoryFindManyArgs } from "../../employmentHistory/base/EmploymentHistoryFindManyArgs";
import { EmploymentHistory } from "../../employmentHistory/base/EmploymentHistory";
import { EmploymentHistoryWhereUniqueInput } from "../../employmentHistory/base/EmploymentHistoryWhereUniqueInput";
import { FamilyMemberFindManyArgs } from "../../familyMember/base/FamilyMemberFindManyArgs";
import { FamilyMember } from "../../familyMember/base/FamilyMember";
import { FamilyMemberWhereUniqueInput } from "../../familyMember/base/FamilyMemberWhereUniqueInput";
import { PersonalInfoFindManyArgs } from "../../personalInfo/base/PersonalInfoFindManyArgs";
import { PersonalInfo } from "../../personalInfo/base/PersonalInfo";
import { PersonalInfoWhereUniqueInput } from "../../personalInfo/base/PersonalInfoWhereUniqueInput";
import { TravelHistoryFindManyArgs } from "../../travelHistory/base/TravelHistoryFindManyArgs";
import { TravelHistory } from "../../travelHistory/base/TravelHistory";
import { TravelHistoryWhereUniqueInput } from "../../travelHistory/base/TravelHistoryWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserControllerBase {
  constructor(
    protected readonly service: UserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.create({
      data: data,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(UserFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/applicants")
  @ApiNestedQuery(ApplicantFindManyArgs)
  async findManyApplicants(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Applicant[]> {
    const query = plainToClass(ApplicantFindManyArgs, request.query);
    const results = await this.service.findApplicants(params.id, {
      ...query,
      select: {
        archived: true,
        archivedAt: true,

        archivedBy: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        id: true,

        personalInfo: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        updatedBy: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/applicants")
  async connectApplicants(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicants: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/applicants")
  async updateApplicants(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicants: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/applicants")
  async disconnectApplicants(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicants: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/applicantsArchived")
  @ApiNestedQuery(ApplicantFindManyArgs)
  async findManyApplicantsArchived(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Applicant[]> {
    const query = plainToClass(ApplicantFindManyArgs, request.query);
    const results = await this.service.findApplicantsArchived(params.id, {
      ...query,
      select: {
        archived: true,
        archivedAt: true,

        archivedBy: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        id: true,

        personalInfo: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        updatedBy: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/applicantsArchived")
  async connectApplicantsArchived(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicantsArchived: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/applicantsArchived")
  async updateApplicantsArchived(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicantsArchived: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/applicantsArchived")
  async disconnectApplicantsArchived(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicantsArchived: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/applicantsCreated")
  @ApiNestedQuery(ApplicantFindManyArgs)
  async findManyApplicantsCreated(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Applicant[]> {
    const query = plainToClass(ApplicantFindManyArgs, request.query);
    const results = await this.service.findApplicantsCreated(params.id, {
      ...query,
      select: {
        archived: true,
        archivedAt: true,

        archivedBy: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        id: true,

        personalInfo: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        updatedBy: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/applicantsCreated")
  async connectApplicantsCreated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicantsCreated: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/applicantsCreated")
  async updateApplicantsCreated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicantsCreated: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/applicantsCreated")
  async disconnectApplicantsCreated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicantsCreated: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/applicantsUpdated")
  @ApiNestedQuery(ApplicantFindManyArgs)
  async findManyApplicantsUpdated(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Applicant[]> {
    const query = plainToClass(ApplicantFindManyArgs, request.query);
    const results = await this.service.findApplicantsUpdated(params.id, {
      ...query,
      select: {
        archived: true,
        archivedAt: true,

        archivedBy: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        id: true,

        personalInfo: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        updatedBy: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/applicantsUpdated")
  async connectApplicantsUpdated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicantsUpdated: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/applicantsUpdated")
  async updateApplicantsUpdated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicantsUpdated: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/applicantsUpdated")
  async disconnectApplicantsUpdated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicantsUpdated: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "EducationHistory",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/educationHistoriesArchived")
  @ApiNestedQuery(EducationHistoryFindManyArgs)
  async findManyEducationHistoriesArchived(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<EducationHistory[]> {
    const query = plainToClass(EducationHistoryFindManyArgs, request.query);
    const results = await this.service.findEducationHistoriesArchived(
      params.id,
      {
        ...query,
        select: {
          additionalInfo: true,

          applicant: {
            select: {
              id: true,
            },
          },

          archived: true,

          archivedBy: {
            select: {
              id: true,
            },
          },

          city: true,
          country: true,
          createdAt: true,

          createdBy: {
            select: {
              id: true,
            },
          },

          endDate: true,
          id: true,
          institutionName: true,
          isCurrentInstitution: true,
          qualificationGained: true,
          startDate: true,
          updatedAt: true,

          updatedBy: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/educationHistoriesArchived")
  async connectEducationHistoriesArchived(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EducationHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      educationHistoriesArchived: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/educationHistoriesArchived")
  async updateEducationHistoriesArchived(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EducationHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      educationHistoriesArchived: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/educationHistoriesArchived")
  async disconnectEducationHistoriesArchived(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EducationHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      educationHistoriesArchived: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "EducationHistory",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/educationHistoriesCreated")
  @ApiNestedQuery(EducationHistoryFindManyArgs)
  async findManyEducationHistoriesCreated(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<EducationHistory[]> {
    const query = plainToClass(EducationHistoryFindManyArgs, request.query);
    const results = await this.service.findEducationHistoriesCreated(
      params.id,
      {
        ...query,
        select: {
          additionalInfo: true,

          applicant: {
            select: {
              id: true,
            },
          },

          archived: true,

          archivedBy: {
            select: {
              id: true,
            },
          },

          city: true,
          country: true,
          createdAt: true,

          createdBy: {
            select: {
              id: true,
            },
          },

          endDate: true,
          id: true,
          institutionName: true,
          isCurrentInstitution: true,
          qualificationGained: true,
          startDate: true,
          updatedAt: true,

          updatedBy: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/educationHistoriesCreated")
  async connectEducationHistoriesCreated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EducationHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      educationHistoriesCreated: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/educationHistoriesCreated")
  async updateEducationHistoriesCreated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EducationHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      educationHistoriesCreated: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/educationHistoriesCreated")
  async disconnectEducationHistoriesCreated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EducationHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      educationHistoriesCreated: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "EducationHistory",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/educationHistoriesUpdated")
  @ApiNestedQuery(EducationHistoryFindManyArgs)
  async findManyEducationHistoriesUpdated(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<EducationHistory[]> {
    const query = plainToClass(EducationHistoryFindManyArgs, request.query);
    const results = await this.service.findEducationHistoriesUpdated(
      params.id,
      {
        ...query,
        select: {
          additionalInfo: true,

          applicant: {
            select: {
              id: true,
            },
          },

          archived: true,

          archivedBy: {
            select: {
              id: true,
            },
          },

          city: true,
          country: true,
          createdAt: true,

          createdBy: {
            select: {
              id: true,
            },
          },

          endDate: true,
          id: true,
          institutionName: true,
          isCurrentInstitution: true,
          qualificationGained: true,
          startDate: true,
          updatedAt: true,

          updatedBy: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/educationHistoriesUpdated")
  async connectEducationHistoriesUpdated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EducationHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      educationHistoriesUpdated: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/educationHistoriesUpdated")
  async updateEducationHistoriesUpdated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EducationHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      educationHistoriesUpdated: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/educationHistoriesUpdated")
  async disconnectEducationHistoriesUpdated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EducationHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      educationHistoriesUpdated: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "EmploymentHistory",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/employmentHistoriesArchived")
  @ApiNestedQuery(EmploymentHistoryFindManyArgs)
  async findManyEmploymentHistoriesArchived(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<EmploymentHistory[]> {
    const query = plainToClass(EmploymentHistoryFindManyArgs, request.query);
    const results = await this.service.findEmploymentHistoriesArchived(
      params.id,
      {
        ...query,
        select: {
          additionalInfo: true,

          applicant: {
            select: {
              id: true,
            },
          },

          archived: true,

          archivedBy: {
            select: {
              id: true,
            },
          },

          cityOfWork: true,
          companyName: true,
          countryOfWork: true,
          createdAt: true,

          createdBy: {
            select: {
              id: true,
            },
          },

          duties: true,
          employmentType: true,
          endDate: true,
          id: true,
          isCurrentJob: true,
          jobTitle: true,
          nzBusinessNumber: true,
          startDate: true,
          updatedAt: true,

          updatedBy: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/employmentHistoriesArchived")
  async connectEmploymentHistoriesArchived(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EmploymentHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employmentHistoriesArchived: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/employmentHistoriesArchived")
  async updateEmploymentHistoriesArchived(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EmploymentHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employmentHistoriesArchived: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/employmentHistoriesArchived")
  async disconnectEmploymentHistoriesArchived(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EmploymentHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employmentHistoriesArchived: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "EmploymentHistory",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/employmentHistoriesCreated")
  @ApiNestedQuery(EmploymentHistoryFindManyArgs)
  async findManyEmploymentHistoriesCreated(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<EmploymentHistory[]> {
    const query = plainToClass(EmploymentHistoryFindManyArgs, request.query);
    const results = await this.service.findEmploymentHistoriesCreated(
      params.id,
      {
        ...query,
        select: {
          additionalInfo: true,

          applicant: {
            select: {
              id: true,
            },
          },

          archived: true,

          archivedBy: {
            select: {
              id: true,
            },
          },

          cityOfWork: true,
          companyName: true,
          countryOfWork: true,
          createdAt: true,

          createdBy: {
            select: {
              id: true,
            },
          },

          duties: true,
          employmentType: true,
          endDate: true,
          id: true,
          isCurrentJob: true,
          jobTitle: true,
          nzBusinessNumber: true,
          startDate: true,
          updatedAt: true,

          updatedBy: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/employmentHistoriesCreated")
  async connectEmploymentHistoriesCreated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EmploymentHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employmentHistoriesCreated: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/employmentHistoriesCreated")
  async updateEmploymentHistoriesCreated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EmploymentHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employmentHistoriesCreated: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/employmentHistoriesCreated")
  async disconnectEmploymentHistoriesCreated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EmploymentHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employmentHistoriesCreated: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "EmploymentHistory",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/employmentHistoriesUpdated")
  @ApiNestedQuery(EmploymentHistoryFindManyArgs)
  async findManyEmploymentHistoriesUpdated(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<EmploymentHistory[]> {
    const query = plainToClass(EmploymentHistoryFindManyArgs, request.query);
    const results = await this.service.findEmploymentHistoriesUpdated(
      params.id,
      {
        ...query,
        select: {
          additionalInfo: true,

          applicant: {
            select: {
              id: true,
            },
          },

          archived: true,

          archivedBy: {
            select: {
              id: true,
            },
          },

          cityOfWork: true,
          companyName: true,
          countryOfWork: true,
          createdAt: true,

          createdBy: {
            select: {
              id: true,
            },
          },

          duties: true,
          employmentType: true,
          endDate: true,
          id: true,
          isCurrentJob: true,
          jobTitle: true,
          nzBusinessNumber: true,
          startDate: true,
          updatedAt: true,

          updatedBy: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/employmentHistoriesUpdated")
  async connectEmploymentHistoriesUpdated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EmploymentHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employmentHistoriesUpdated: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/employmentHistoriesUpdated")
  async updateEmploymentHistoriesUpdated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EmploymentHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employmentHistoriesUpdated: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/employmentHistoriesUpdated")
  async disconnectEmploymentHistoriesUpdated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EmploymentHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employmentHistoriesUpdated: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/familyMembersArchived")
  @ApiNestedQuery(FamilyMemberFindManyArgs)
  async findManyFamilyMembersArchived(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<FamilyMember[]> {
    const query = plainToClass(FamilyMemberFindManyArgs, request.query);
    const results = await this.service.findFamilyMembersArchived(params.id, {
      ...query,
      select: {
        archived: true,

        archivedBy: {
          select: {
            id: true,
          },
        },

        countriesOfCitizenship: true,
        countryOfBirth: true,
        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        dateOfBirth: true,
        firstName: true,
        id: true,
        lastName: true,
        relationshipToApplicant: true,
        updatedAt: true,

        updatedBy: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/familyMembersArchived")
  async connectFamilyMembersArchived(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FamilyMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      familyMembersArchived: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/familyMembersArchived")
  async updateFamilyMembersArchived(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FamilyMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      familyMembersArchived: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/familyMembersArchived")
  async disconnectFamilyMembersArchived(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FamilyMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      familyMembersArchived: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/familyMembersCreated")
  @ApiNestedQuery(FamilyMemberFindManyArgs)
  async findManyFamilyMembersCreated(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<FamilyMember[]> {
    const query = plainToClass(FamilyMemberFindManyArgs, request.query);
    const results = await this.service.findFamilyMembersCreated(params.id, {
      ...query,
      select: {
        archived: true,

        archivedBy: {
          select: {
            id: true,
          },
        },

        countriesOfCitizenship: true,
        countryOfBirth: true,
        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        dateOfBirth: true,
        firstName: true,
        id: true,
        lastName: true,
        relationshipToApplicant: true,
        updatedAt: true,

        updatedBy: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/familyMembersCreated")
  async connectFamilyMembersCreated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FamilyMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      familyMembersCreated: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/familyMembersCreated")
  async updateFamilyMembersCreated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FamilyMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      familyMembersCreated: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/familyMembersCreated")
  async disconnectFamilyMembersCreated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FamilyMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      familyMembersCreated: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/familyMembersUpdated")
  @ApiNestedQuery(FamilyMemberFindManyArgs)
  async findManyFamilyMembersUpdated(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<FamilyMember[]> {
    const query = plainToClass(FamilyMemberFindManyArgs, request.query);
    const results = await this.service.findFamilyMembersUpdated(params.id, {
      ...query,
      select: {
        archived: true,

        archivedBy: {
          select: {
            id: true,
          },
        },

        countriesOfCitizenship: true,
        countryOfBirth: true,
        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        dateOfBirth: true,
        firstName: true,
        id: true,
        lastName: true,
        relationshipToApplicant: true,
        updatedAt: true,

        updatedBy: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/familyMembersUpdated")
  async connectFamilyMembersUpdated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FamilyMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      familyMembersUpdated: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/familyMembersUpdated")
  async updateFamilyMembersUpdated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FamilyMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      familyMembersUpdated: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/familyMembersUpdated")
  async disconnectFamilyMembersUpdated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FamilyMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      familyMembersUpdated: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "PersonalInfo",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/personalInfosArchived")
  @ApiNestedQuery(PersonalInfoFindManyArgs)
  async findManyPersonalInfosArchived(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<PersonalInfo[]> {
    const query = plainToClass(PersonalInfoFindManyArgs, request.query);
    const results = await this.service.findPersonalInfosArchived(params.id, {
      ...query,
      select: {
        applicant: {
          select: {
            id: true,
          },
        },

        archived: true,

        archivedBy: {
          select: {
            id: true,
          },
        },

        countriesOfCitizenship: true,
        countryOfBirth: true,
        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        dateOfBirth: true,
        email: true,
        firstName: true,
        homeCountryAddress: true,
        id: true,
        inzClientNumber: true,
        lastName: true,
        mobile: true,
        nzAddress: true,
        passportNumber: true,
        updatedAt: true,

        updatedBy: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/personalInfosArchived")
  async connectPersonalInfosArchived(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PersonalInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      personalInfosArchived: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/personalInfosArchived")
  async updatePersonalInfosArchived(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PersonalInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      personalInfosArchived: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/personalInfosArchived")
  async disconnectPersonalInfosArchived(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PersonalInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      personalInfosArchived: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "PersonalInfo",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/personalInfosCreated")
  @ApiNestedQuery(PersonalInfoFindManyArgs)
  async findManyPersonalInfosCreated(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<PersonalInfo[]> {
    const query = plainToClass(PersonalInfoFindManyArgs, request.query);
    const results = await this.service.findPersonalInfosCreated(params.id, {
      ...query,
      select: {
        applicant: {
          select: {
            id: true,
          },
        },

        archived: true,

        archivedBy: {
          select: {
            id: true,
          },
        },

        countriesOfCitizenship: true,
        countryOfBirth: true,
        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        dateOfBirth: true,
        email: true,
        firstName: true,
        homeCountryAddress: true,
        id: true,
        inzClientNumber: true,
        lastName: true,
        mobile: true,
        nzAddress: true,
        passportNumber: true,
        updatedAt: true,

        updatedBy: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/personalInfosCreated")
  async connectPersonalInfosCreated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PersonalInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      personalInfosCreated: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/personalInfosCreated")
  async updatePersonalInfosCreated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PersonalInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      personalInfosCreated: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/personalInfosCreated")
  async disconnectPersonalInfosCreated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PersonalInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      personalInfosCreated: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "PersonalInfo",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/personalInfosUpdated")
  @ApiNestedQuery(PersonalInfoFindManyArgs)
  async findManyPersonalInfosUpdated(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<PersonalInfo[]> {
    const query = plainToClass(PersonalInfoFindManyArgs, request.query);
    const results = await this.service.findPersonalInfosUpdated(params.id, {
      ...query,
      select: {
        applicant: {
          select: {
            id: true,
          },
        },

        archived: true,

        archivedBy: {
          select: {
            id: true,
          },
        },

        countriesOfCitizenship: true,
        countryOfBirth: true,
        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        dateOfBirth: true,
        email: true,
        firstName: true,
        homeCountryAddress: true,
        id: true,
        inzClientNumber: true,
        lastName: true,
        mobile: true,
        nzAddress: true,
        passportNumber: true,
        updatedAt: true,

        updatedBy: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/personalInfosUpdated")
  async connectPersonalInfosUpdated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PersonalInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      personalInfosUpdated: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/personalInfosUpdated")
  async updatePersonalInfosUpdated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PersonalInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      personalInfosUpdated: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/personalInfosUpdated")
  async disconnectPersonalInfosUpdated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PersonalInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      personalInfosUpdated: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "TravelHistory",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/travelHistoriesArchived")
  @ApiNestedQuery(TravelHistoryFindManyArgs)
  async findManyTravelHistoriesArchived(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<TravelHistory[]> {
    const query = plainToClass(TravelHistoryFindManyArgs, request.query);
    const results = await this.service.findTravelHistoriesArchived(params.id, {
      ...query,
      select: {
        applicant: {
          select: {
            id: true,
          },
        },

        archived: true,

        archivedBy: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        dateDeparted: true,
        dateEntered: true,
        destinationCity: true,
        destinationCountry: true,
        destinationHub: true,
        id: true,
        reasonOfTravel: true,
        updatedAt: true,

        updatedBy: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/travelHistoriesArchived")
  async connectTravelHistoriesArchived(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TravelHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      travelHistoriesArchived: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/travelHistoriesArchived")
  async updateTravelHistoriesArchived(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TravelHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      travelHistoriesArchived: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/travelHistoriesArchived")
  async disconnectTravelHistoriesArchived(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TravelHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      travelHistoriesArchived: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "TravelHistory",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/travelHistoriesCreated")
  @ApiNestedQuery(TravelHistoryFindManyArgs)
  async findManyTravelHistoriesCreated(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<TravelHistory[]> {
    const query = plainToClass(TravelHistoryFindManyArgs, request.query);
    const results = await this.service.findTravelHistoriesCreated(params.id, {
      ...query,
      select: {
        applicant: {
          select: {
            id: true,
          },
        },

        archived: true,

        archivedBy: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        dateDeparted: true,
        dateEntered: true,
        destinationCity: true,
        destinationCountry: true,
        destinationHub: true,
        id: true,
        reasonOfTravel: true,
        updatedAt: true,

        updatedBy: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/travelHistoriesCreated")
  async connectTravelHistoriesCreated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TravelHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      travelHistoriesCreated: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/travelHistoriesCreated")
  async updateTravelHistoriesCreated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TravelHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      travelHistoriesCreated: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/travelHistoriesCreated")
  async disconnectTravelHistoriesCreated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TravelHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      travelHistoriesCreated: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "TravelHistory",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/travelHistoriesUpdated")
  @ApiNestedQuery(TravelHistoryFindManyArgs)
  async findManyTravelHistoriesUpdated(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<TravelHistory[]> {
    const query = plainToClass(TravelHistoryFindManyArgs, request.query);
    const results = await this.service.findTravelHistoriesUpdated(params.id, {
      ...query,
      select: {
        applicant: {
          select: {
            id: true,
          },
        },

        archived: true,

        archivedBy: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        dateDeparted: true,
        dateEntered: true,
        destinationCity: true,
        destinationCountry: true,
        destinationHub: true,
        id: true,
        reasonOfTravel: true,
        updatedAt: true,

        updatedBy: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/travelHistoriesUpdated")
  async connectTravelHistoriesUpdated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TravelHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      travelHistoriesUpdated: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/travelHistoriesUpdated")
  async updateTravelHistoriesUpdated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TravelHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      travelHistoriesUpdated: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/travelHistoriesUpdated")
  async disconnectTravelHistoriesUpdated(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TravelHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      travelHistoriesUpdated: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
