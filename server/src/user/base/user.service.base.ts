/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";

import {
  Prisma,
  User,
  Applicant,
  EducationHistory,
  EmploymentHistory,
  FamilyMember,
  PersonalInfo,
  TravelHistory,
} from "@prisma/client";

import { PasswordService } from "../../auth/password.service";
import { transformStringFieldUpdateInput } from "../../prisma.util";

export class UserServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly passwordService: PasswordService
  ) {}

  async count<T extends Prisma.UserFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserFindManyArgs>
  ): Promise<number> {
    return this.prisma.user.count(args);
  }

  async findMany<T extends Prisma.UserFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserFindManyArgs>
  ): Promise<User[]> {
    return this.prisma.user.findMany(args);
  }
  async findOne<T extends Prisma.UserFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserFindUniqueArgs>
  ): Promise<User | null> {
    return this.prisma.user.findUnique(args);
  }
  async create<T extends Prisma.UserCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserCreateArgs>
  ): Promise<User> {
    return this.prisma.user.create<T>({
      ...args,

      data: {
        ...args.data,
        password: await this.passwordService.hash(args.data.password),
      },
    });
  }
  async update<T extends Prisma.UserUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserUpdateArgs>
  ): Promise<User> {
    return this.prisma.user.update<T>({
      ...args,

      data: {
        ...args.data,

        password:
          args.data.password &&
          (await transformStringFieldUpdateInput(
            args.data.password,
            (password) => this.passwordService.hash(password)
          )),
      },
    });
  }
  async delete<T extends Prisma.UserDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserDeleteArgs>
  ): Promise<User> {
    return this.prisma.user.delete(args);
  }

  async findApplicants(
    parentId: string,
    args: Prisma.ApplicantFindManyArgs
  ): Promise<Applicant[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .applicants(args);
  }

  async findApplicantsArchived(
    parentId: string,
    args: Prisma.ApplicantFindManyArgs
  ): Promise<Applicant[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .applicantsArchived(args);
  }

  async findApplicantsCreated(
    parentId: string,
    args: Prisma.ApplicantFindManyArgs
  ): Promise<Applicant[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .applicantsCreated(args);
  }

  async findApplicantsUpdated(
    parentId: string,
    args: Prisma.ApplicantFindManyArgs
  ): Promise<Applicant[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .applicantsUpdated(args);
  }

  async findEducationHistoriesArchived(
    parentId: string,
    args: Prisma.EducationHistoryFindManyArgs
  ): Promise<EducationHistory[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .educationHistoriesArchived(args);
  }

  async findEducationHistoriesCreated(
    parentId: string,
    args: Prisma.EducationHistoryFindManyArgs
  ): Promise<EducationHistory[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .educationHistoriesCreated(args);
  }

  async findEducationHistoriesUpdated(
    parentId: string,
    args: Prisma.EducationHistoryFindManyArgs
  ): Promise<EducationHistory[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .educationHistoriesUpdated(args);
  }

  async findEmploymentHistoriesArchived(
    parentId: string,
    args: Prisma.EmploymentHistoryFindManyArgs
  ): Promise<EmploymentHistory[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .employmentHistoriesArchived(args);
  }

  async findEmploymentHistoriesCreated(
    parentId: string,
    args: Prisma.EmploymentHistoryFindManyArgs
  ): Promise<EmploymentHistory[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .employmentHistoriesCreated(args);
  }

  async findEmploymentHistoriesUpdated(
    parentId: string,
    args: Prisma.EmploymentHistoryFindManyArgs
  ): Promise<EmploymentHistory[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .employmentHistoriesUpdated(args);
  }

  async findFamilyMembersArchived(
    parentId: string,
    args: Prisma.FamilyMemberFindManyArgs
  ): Promise<FamilyMember[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .familyMembersArchived(args);
  }

  async findFamilyMembersCreated(
    parentId: string,
    args: Prisma.FamilyMemberFindManyArgs
  ): Promise<FamilyMember[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .familyMembersCreated(args);
  }

  async findFamilyMembersUpdated(
    parentId: string,
    args: Prisma.FamilyMemberFindManyArgs
  ): Promise<FamilyMember[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .familyMembersUpdated(args);
  }

  async findPersonalInfosArchived(
    parentId: string,
    args: Prisma.PersonalInfoFindManyArgs
  ): Promise<PersonalInfo[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .personalInfosArchived(args);
  }

  async findPersonalInfosCreated(
    parentId: string,
    args: Prisma.PersonalInfoFindManyArgs
  ): Promise<PersonalInfo[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .personalInfosCreated(args);
  }

  async findPersonalInfosUpdated(
    parentId: string,
    args: Prisma.PersonalInfoFindManyArgs
  ): Promise<PersonalInfo[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .personalInfosUpdated(args);
  }

  async findTravelHistoriesArchived(
    parentId: string,
    args: Prisma.TravelHistoryFindManyArgs
  ): Promise<TravelHistory[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .travelHistoriesArchived(args);
  }

  async findTravelHistoriesCreated(
    parentId: string,
    args: Prisma.TravelHistoryFindManyArgs
  ): Promise<TravelHistory[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .travelHistoriesCreated(args);
  }

  async findTravelHistoriesUpdated(
    parentId: string,
    args: Prisma.TravelHistoryFindManyArgs
  ): Promise<TravelHistory[]> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .travelHistoriesUpdated(args);
  }
}
