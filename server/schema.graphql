# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type EducationHiatory {
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
}

input EducationHiatoryOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input EducationHiatoryWhereInput {
  id: StringFilter
}

input EducationHiatoryWhereUniqueInput {
  id: String!
}

type EmploymentHistory {
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
}

input EmploymentHistoryOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input EmploymentHistoryWhereInput {
  id: StringFilter
}

input EmploymentHistoryWhereUniqueInput {
  id: String!
}

type FamilyMember {
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
}

input FamilyMemberOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input FamilyMemberWhereInput {
  id: StringFilter
}

input FamilyMemberWhereUniqueInput {
  id: String!
}

type MetaQueryPayload {
  count: String!
}

type Mutation {
  createTravelHistory(data: TravelHistoryCreateInput!): TravelHistory!
  createUser(data: UserCreateInput!): User!
  deleteEducationHiatory(where: EducationHiatoryWhereUniqueInput!): EducationHiatory!
  deleteEmploymentHistory(where: EmploymentHistoryWhereUniqueInput!): EmploymentHistory!
  deleteFamilyMember(where: FamilyMemberWhereUniqueInput!): FamilyMember!
  deleteTravelHistory(where: TravelHistoryWhereUniqueInput!): TravelHistory!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateTravelHistory(data: TravelHistoryUpdateInput!, where: TravelHistoryWhereUniqueInput!): TravelHistory!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Query {
  _educationHiatoriesMeta(orderBy: [EducationHiatoryOrderByInput!], skip: Float, take: Float, where: EducationHiatoryWhereInput): MetaQueryPayload!
  _employmentHistoriesMeta(orderBy: [EmploymentHistoryOrderByInput!], skip: Float, take: Float, where: EmploymentHistoryWhereInput): MetaQueryPayload!
  _familyMembersMeta(orderBy: [FamilyMemberOrderByInput!], skip: Float, take: Float, where: FamilyMemberWhereInput): MetaQueryPayload!
  _travelHistoriesMeta(orderBy: [TravelHistoryOrderByInput!], skip: Float, take: Float, where: TravelHistoryWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  educationHiatories(orderBy: [EducationHiatoryOrderByInput!], skip: Float, take: Float, where: EducationHiatoryWhereInput): [EducationHiatory!]!
  educationHiatory(where: EducationHiatoryWhereUniqueInput!): EducationHiatory
  employmentHistories(orderBy: [EmploymentHistoryOrderByInput!], skip: Float, take: Float, where: EmploymentHistoryWhereInput): [EmploymentHistory!]!
  employmentHistory(where: EmploymentHistoryWhereUniqueInput!): EmploymentHistory
  familyMember(where: FamilyMemberWhereUniqueInput!): FamilyMember
  familyMembers(orderBy: [FamilyMemberOrderByInput!], skip: Float, take: Float, where: FamilyMemberWhereInput): [FamilyMember!]!
  travelHistories(orderBy: [TravelHistoryOrderByInput!], skip: Float, take: Float, where: TravelHistoryWhereInput): [TravelHistory!]!
  travelHistory(where: TravelHistoryWhereUniqueInput!): TravelHistory
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type TravelHistory {
  createdAt: DateTime!
  destinationAirport: String
  destinationCity: String
  destinationCountry: String
  id: String!
  updatedAt: DateTime!
}

input TravelHistoryCreateInput {
  destinationAirport: String
  destinationCity: String
  destinationCountry: String
}

input TravelHistoryOrderByInput {
  createdAt: SortOrder
  destinationAirport: SortOrder
  destinationCity: SortOrder
  destinationCountry: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input TravelHistoryUpdateInput {
  destinationAirport: String
  destinationCity: String
  destinationCountry: String
}

input TravelHistoryWhereInput {
  destinationAirport: StringNullableFilter
  destinationCity: StringNullableFilter
  destinationCountry: StringNullableFilter
  id: StringFilter
}

input TravelHistoryWhereUniqueInput {
  id: String!
}

type User {
  createdAt: DateTime!
  email: String
  firstName: String
  id: String!
  lastName: String
  roles: [String!]!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  email: String
  firstName: String
  lastName: String
  password: String!
  roles: [String!]!
  username: String!
}

type UserInfo {
  accessToken: String
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  email: String
  firstName: String
  lastName: String
  password: String
  roles: [String!]
  username: String
}

input UserWhereInput {
  email: StringNullableFilter
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
